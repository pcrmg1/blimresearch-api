// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  User
  Admin
}

model User {
  id                   String                 @id @default(cuid())
  email                String                 @unique
  name                 String?
  password             String
  role                 Role                   @default(User)
  token                String?
  changePasswordToken  String?
  changePasswordExpire DateTime?
  limiteCreditos       Float                  @default(0)
  creditosUsados       Float                  @default(0)
  sessions             Session[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  carruselQuery        CarruselQuery[]
  carruseles           Carrusel[]
  TiktokVideoQuery     VideoQuery[]
  TiktokVideo          Video[]
  Transcription        Transcription[]
  Translation          Translation[]
  FriendlifiedTexts    FriendlifiedText[]
  TiktokUsernameVirals TiktokUsernameVirals[]
  gastos               Float                  @default(0)
  UsoCreditos          UsoCreditos[]

  @@index([email], name: "email")
}

model Session {
  id        String   @id @default(cuid())
  token     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CarruselQuery {
  id         String     @id @default(cuid())
  query      String
  language   String?
  carruseles Carrusel[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  userId     String
  user       User       @relation(fields: [userId], references: [id])

  @@index([query, id], name: "query_id_carruselQuery")
}

model Carrusel {
  id              String                 @id @default(cuid())
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  url             String
  imagesUrl       String[]
  transcriptionId String?
  transcription   CarruselTranscription?
  username        String?
  profilePicUrl   String?
  user_followers  Int?
  user_follows    Int?
  likes           Int?
  timestamp       DateTime?
  userId          String
  user            User                   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  carruselQueryId String?
  carruselQuery   CarruselQuery?         @relation(fields: [carruselQueryId], references: [id])

  @@index([url, id], name: "url")
}

model CarruselTranscription {
  id         String   @id @default(cuid())
  text       String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  carruselId String   @unique
  carrusel   Carrusel @relation(fields: [carruselId], references: [id])

  @@index([text, id], name: "text_id_carruselTranscription")
}

model VideoQuery {
  id        String   @id @default(cuid())
  query     String
  language  String
  videos    Video[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  platform  String
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([query, id], name: "query_id_videoQuery")
}

model Video {
  id                     String                @id @default(cuid())
  timestamp              DateTime              @default(now())
  queryId                String?
  query                  VideoQuery?           @relation(fields: [queryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  language               String?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  platform               String
  username               String
  userFans               Int?
  userHearts             Int?
  userVideos             Int?
  userHeartsAvg          Int?
  userPlayAvg            Int?
  userShareAvg           Int?
  videoUrl               String?
  videoHearts            Int?
  videoComments          Int?
  videoShares            Int?
  videoViews             Int?
  userId                 String
  user                   User                  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tiktokUsernameViralsId String?
  tiktokUsernameVirals   TiktokUsernameVirals? @relation(fields: [tiktokUsernameViralsId], references: [id])
  Transcription          Transcription[]

  @@index([videoUrl, id], name: "videoUrl_id")
}

enum TranscriptionType {
  image
  video
}

model Transcription {
  id                String             @id @default(cuid())
  shortcode         String?
  text              String
  language          String
  type              TranscriptionType
  videoId           String?
  video             Video?             @relation(fields: [videoId], references: [id])
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  userId            String
  user              User               @relation(fields: [userId], references: [id])
  FriendlifiedTexts FriendlifiedText[]
  Translation       Translation[]

  @@index([shortcode, id], name: "shortcode_id")
}

model Translation {
  id                String             @id @default(cuid())
  text              String
  language          String
  transcription     Transcription?     @relation(fields: [transcriptionId], references: [id])
  transcriptionId   String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  userId            String
  user              User               @relation(fields: [userId], references: [id])
  FriendlifiedTexts FriendlifiedText[]

  @@index([text, id], name: "text_id_translation")
}

model FriendlifiedText {
  id              String         @id @default(cuid())
  text            String
  language        String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  userId          String
  user            User           @relation(fields: [userId], references: [id])
  transcriptionId String?
  transcription   Transcription? @relation(fields: [transcriptionId], references: [id])
  translationId   String?
  translation     Translation?   @relation(fields: [translationId], references: [id])

  @@index([text, id], name: "text_id_friendlifiedText")
}

model TiktokUsernameVirals {
  id        String   @id @default(cuid())
  name      String?
  usernames String[]
  videos    Video[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([usernames, id], name: "usernames")
}

model UsoCreditos {
  id             String   @id @default(cuid())
  creditosUsados Int
  concepto       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id])

  @@index([concepto, id], name: "creditos")
}
